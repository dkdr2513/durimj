00000000: 00100011 01101001 01101110 01100011 01101100 01110101  #inclu
00000006: 01100100 01100101 00100000 00111100 01110011 01110100  de <st
0000000c: 01100100 01101001 01101111 00101110 01101000 00111110  dio.h>
00000012: 00001010 00100011 01101001 01101110 01100011 01101100  .#incl
00000018: 01110101 01100100 01100101 00100000 00111100 01110011  ude <s
0000001e: 01110100 01100100 01101100 01101001 01100010 00101110  tdlib.
00000024: 01101000 00111110 00001010 00100011 01101001 01101110  h>.#in
0000002a: 01100011 01101100 01110101 01100100 01100101 00100000  clude 
00000030: 00111100 01110011 01110100 01110010 01101001 01101110  <strin
00000036: 01100111 00101110 01101000 00111110 00001010 00001010  g.h>..
0000003c: 00100011 01100100 01100101 01100110 01101001 01101110  #defin
00000042: 01100101 00100000 01010100 01010010 01010101 01000101  e TRUE
00000048: 00100000 00110001 00001010 00100011 01100100 01100101   1.#de
0000004e: 01100110 01101001 01101110 01100101 00100000 01000110  fine F
00000054: 01000001 01001100 01010011 01000101 00100000 00110000  ALSE 0
0000005a: 00001010 00100011 01100100 01100101 01100110 01101001  .#defi
00000060: 01101110 01100101 00100000 01000010 01000001 01000100  ne BAD
00000066: 01011111 01001110 01010101 01001101 01000010 01000101  _NUMBE
0000006c: 01010010 01011111 01000001 01010010 01000111 01010011  R_ARGS
00000072: 00100000 00110001 00001010 00001010 00101111 00101010   1../*
00000078: 00101010 00001010 00100000 00101010 00100000 01010000  *. * P
0000007e: 01100001 01110010 01110011 01100101 01110011 00100000  arses 
00000084: 01110100 01101000 01100101 00100000 01100011 01101111  the co
0000008a: 01101101 01101101 01100001 01101110 01100100 00100000  mmand 
00000090: 01101100 01101001 01101110 01100101 00101110 00001010  line..
00000096: 00100000 00101010 00001010 00100000 00101010 00100000   *. * 
0000009c: 01100001 01110010 01100111 01100011 00111010 00100000  argc: 
000000a2: 01110100 01101000 01100101 00100000 01101110 01110101  the nu
000000a8: 01101101 01100010 01100101 01110010 00100000 01101111  mber o
000000ae: 01100110 00100000 01101001 01110100 01100101 01101101  f item
000000b4: 01110011 00100000 01101111 01101110 00100000 01110100  s on t
000000ba: 01101000 01100101 00100000 01100011 01101111 01101101  he com
000000c0: 01101101 01100001 01101110 01100100 00100000 01101100  mand l
000000c6: 01101001 01101110 01100101 00100000 00101000 01100001  ine (a
000000cc: 01101110 01100100 00100000 01101100 01100101 01101110  nd len
000000d2: 01100111 01110100 01101000 00100000 01101111 01100110  gth of
000000d8: 00100000 01110100 01101000 01100101 00001010 00100000   the. 
000000de: 00101010 00100000 00100000 00100000 00100000 00100000  *     
000000e4: 00100000 00100000 01100001 01110010 01100111 01110110    argv
000000ea: 00100000 01100001 01110010 01110010 01100001 01111001   array
000000f0: 00101001 00100000 01101001 01101110 01100011 01101100  ) incl
000000f6: 01110101 01100100 01101001 01101110 01100111 00100000  uding 
000000fc: 01110100 01101000 01100101 00100000 01100101 01111000  the ex
00000102: 01100101 01100011 01110101 01110100 01100001 01100010  ecutab
00000108: 01101100 01100101 00001010 00100000 00101010 00100000  le. * 
0000010e: 01100001 01110010 01100111 01110110 00111010 00100000  argv: 
00000114: 01110100 01101000 01100101 00100000 01100001 01110010  the ar
0000011a: 01110010 01100001 01111001 00100000 01101111 01100110  ray of
00000120: 00100000 01100001 01110010 01100111 01110101 01101101   argum
00000126: 01100101 01101110 01110100 01110011 00100000 01100001  ents a
0000012c: 01110011 00100000 01110011 01110100 01110010 01101001  s stri
00000132: 01101110 01100111 01110011 00100000 00101000 01100011  ngs (c
00000138: 01101000 01100001 01110010 00101010 00100000 01100001  har* a
0000013e: 01110010 01110010 01100001 01111001 00101001 00001010  rray).
00000144: 00100000 00101010 00100000 01100010 01101001 01110100   * bit
0000014a: 01110011 00111010 00100000 01110100 01101000 01100101  s: the
00000150: 00100000 01101001 01101110 01110100 01100101 01100111   integ
00000156: 01100101 01110010 00100000 01110110 01100001 01101100  er val
0000015c: 01110101 01100101 00100000 01101001 01110011 00100000  ue is 
00000162: 01110011 01100101 01110100 00100000 01110100 01101111  set to
00000168: 00100000 01010100 01010010 01010101 01000101 00100000   TRUE 
0000016e: 01101001 01100110 00100000 01100010 01101001 01110100  if bit
00000174: 01110011 00100000 01101111 01110101 01110100 01110000  s outp
0000017a: 01110101 01110100 00100000 01101001 01101110 01100100  ut ind
00000180: 01101001 01100011 01100001 01110100 01100101 01100100  icated
00000186: 00001010 00100000 00101010 00100000 00100000 00100000  . *   
0000018c: 00100000 00100000 00100000 00100000 01101111 01110101      ou
00000192: 01110100 01101000 01100101 01110010 01110111 01101001  therwi
00000198: 01110011 01100101 00100000 01000110 01000001 01001100  se FAL
0000019e: 01010011 01000101 00100000 01100110 01101111 01110010  SE for
000001a4: 00100000 01101000 01100101 01111000 00100000 01101111   hex o
000001aa: 01110101 01110100 01110000 01110101 01110100 00001010  utput.
000001b0: 00100000 00101010 00001010 00100000 00101010 00100000   *. * 
000001b6: 01110010 01100101 01110100 01110101 01110010 01101110  return
000001bc: 01110011 00100000 01110100 01101000 01100101 00100000  s the 
000001c2: 01101001 01101110 01110000 01110101 01110100 00100000  input 
000001c8: 01100110 01101001 01101100 01100101 00100000 01110000  file p
000001ce: 01101111 01101001 01101110 01110100 01100101 01110010  ointer
000001d4: 00100000 00101000 01000110 01001001 01001100 01000101   (FILE
000001da: 00101010 00101001 00001010 00100000 00101010 00101010  *). **
000001e0: 00101111 00001010 01000110 01001001 01001100 01000101  /.FILE
000001e6: 00100000 00101010 01110000 01100001 01110010 01110011   *pars
000001ec: 01100101 01000011 01101111 01101101 01101101 01100001  eComma
000001f2: 01101110 01100100 01001100 01101001 01101110 01100101  ndLine
000001f8: 00101000 01101001 01101110 01110100 00100000 01100001  (int a
000001fe: 01110010 01100111 01100011 00101100 00100000 01100011  rgc, c
00000204: 01101000 01100001 01110010 00100000 00101010 00101010  har **
0000020a: 01100001 01110010 01100111 01110110 00101100 00100000  argv, 
00000210: 01101001 01101110 01110100 00100000 00101010 01100010  int *b
00000216: 01101001 01110100 01110011 00101001 00100000 01111011  its) {
0000021c: 00001010 00100000 00100000 01101001 01100110 00100000  .  if 
00000222: 00101000 01100001 01110010 01100111 01100011 00100000  (argc 
00000228: 00111110 00100000 00110010 00101001 00100000 01111011  > 2) {
0000022e: 00001010 00100000 00100000 00100000 00100000 01110000  .    p
00000234: 01110010 01101001 01101110 01110100 01100110 00101000  rintf(
0000023a: 00100010 01010101 01110011 01100001 01100111 01100101  "Usage
00000240: 00111010 00100000 00100101 01110011 00100000 01011011  : %s [
00000246: 00101101 01100010 01111100 00101101 01100010 01101001  -b|-bi
0000024c: 01110100 01110011 01011101 01011100 01101110 00100010  ts]\n"
00000252: 00101100 00100000 01100001 01110010 01100111 01110110  , argv
00000258: 01011011 00110000 01011101 00101001 00111011 00001010  [0]);.
0000025e: 00100000 00100000 00100000 00100000 01100101 01111000      ex
00000264: 01101001 01110100 00101000 01000010 01000001 01000100  it(BAD
0000026a: 01011111 01001110 01010101 01001101 01000010 01000101  _NUMBE
00000270: 01010010 01011111 01000001 01010010 01000111 01010011  R_ARGS
00000276: 00101001 00111011 00001010 00100000 00100000 01111101  );.  }
0000027c: 00001010 00001010 00100000 00100000 01101001 01100110  ..  if
00000282: 00100000 00101000 01100001 01110010 01100111 01100011   (argc
00000288: 00100000 00111101 00111101 00100000 00110010 00100000   == 2 
0000028e: 00100110 00100110 00001010 00100000 00100000 00100000  &&.   
00000294: 00100000 00100000 00100000 00101000 01110011 01110100     (st
0000029a: 01110010 01100011 01101101 01110000 00101000 01100001  rcmp(a
000002a0: 01110010 01100111 01110110 01011011 00110001 01011101  rgv[1]
000002a6: 00101100 00100000 00100010 00101101 01100010 00100010  , "-b"
000002ac: 00101001 00100000 00111101 00111101 00100000 00110000  ) == 0
000002b2: 00100000 01111100 01111100 00100000 01110011 01110100   || st
000002b8: 01110010 01100011 01101101 01110000 00101000 01100001  rcmp(a
000002be: 01110010 01100111 01110110 01011011 00110001 01011101  rgv[1]
000002c4: 00101100 00100000 00100010 00101101 01100010 01101001  , "-bi
000002ca: 01110100 01110011 00100010 00101001 00100000 00111101  ts") =
000002d0: 00111101 00100000 00110000 00101001 00101001 00100000  = 0)) 
000002d6: 01111011 00001010 00100000 00100000 00100000 00100000  {.    
000002dc: 00101010 01100010 01101001 01110100 01110011 00100000  *bits 
000002e2: 00111101 00100000 01010100 01010010 01010101 01000101  = TRUE
000002e8: 00111011 00001010 00100000 00100000 01111101 00100000  ;.  } 
000002ee: 01100101 01101100 01110011 01100101 00100000 01111011  else {
000002f4: 00001010 00100000 00100000 00100000 00100000 00101010  .    *
000002fa: 01100010 01101001 01110100 01110011 00100000 00111101  bits =
00000300: 00100000 01000110 01000001 01001100 01010011 01000101   FALSE
00000306: 00111011 00001010 00100000 00100000 01111101 00001010  ;.  }.
0000030c: 00001010 00100000 00100000 01110010 01100101 01110100  .  ret
00000312: 01110101 01110010 01101110 00100000 01110011 01110100  urn st
00000318: 01100100 01101001 01101110 00111011 00001010 01111101  din;.}
0000031e: 00001010 00001010 00101111 00101010 00101010 00001010  ../**.
00000324: 00100000 00101010 00100000 01010111 01110010 01101001   * Wri
0000032a: 01110100 01100101 01110011 00100000 01100100 01100001  tes da
00000330: 01110100 01100001 00100000 01110100 01101111 00100000  ta to 
00000336: 01110011 01110100 01100100 01101111 01110101 01110100  stdout
0000033c: 00100000 01101001 01101110 00100000 01101000 01100101   in he
00000342: 01111000 01100001 01100100 01100101 01100011 01101001  xadeci
00000348: 01101101 01100001 01101100 00101110 00001010 00100000  mal.. 
0000034e: 00101010 00001010 00100000 00101010 00100000 01010011  *. * S
00000354: 01100101 01100101 00100000 01101101 01111001 01111000  ee myx
0000035a: 01111000 01100100 00101110 01101101 01100100 00100000  xd.md 
00000360: 01100110 01101111 01110010 00100000 01100100 01100101  for de
00000366: 01110100 01100001 01101001 01101100 01110011 00101110  tails.
0000036c: 00001010 00100000 00101010 00001010 00100000 00101010  . *. *
00000372: 00100000 01100100 01100001 01110100 01100001 00111010   data:
00000378: 00100000 01100001 01101110 00100000 01100001 01110010   an ar
0000037e: 01110010 01100001 01111001 00100000 01101111 01100110  ray of
00000384: 00100000 01101110 01101111 00100000 01101101 01101111   no mo
0000038a: 01110010 01100101 00100000 01110100 01101000 01100001  re tha
00000390: 01101110 00100000 00110001 00110110 00100000 01100011  n 16 c
00000396: 01101000 01100001 01110010 01100001 01100011 01110100  haract
0000039c: 01100101 01110010 01110011 00001010 00100000 00101010  ers. *
000003a2: 00100000 01110011 01101001 01111010 01100101 00111010   size:
000003a8: 00100000 01110100 01101000 01100101 00100000 01110011   the s
000003ae: 01101001 01111010 01100101 00100000 01101111 01100110  ize of
000003b4: 00100000 01110100 01101000 01100101 00100000 01100001   the a
000003ba: 01110010 01110010 01100001 01111001 00001010 00100000  rray. 
000003c0: 00101010 00101010 00101111 00001010 01110110 01101111  **/.vo
000003c6: 01101001 01100100 00100000 01110000 01110010 01101001  id pri
000003cc: 01101110 01110100 01000100 01100001 01110100 01100001  ntData
000003d2: 01000001 01110011 01001000 01100101 01111000 00101000  AsHex(
000003d8: 01110101 01101110 01110011 01101001 01100111 01101110  unsign
000003de: 01100101 01100100 00100000 01100011 01101000 01100001  ed cha
000003e4: 01110010 00100000 00101010 01100100 01100001 01110100  r *dat
000003ea: 01100001 00101100 00100000 01110011 01101001 01111010  a, siz
000003f0: 01100101 01011111 01110100 00100000 01110011 01101001  e_t si
000003f6: 01111010 01100101 00101001 00100000 01111011 00001010  ze) {.
000003fc: 00100000 00100000 01100110 01101111 01110010 00100000    for 
00000402: 00101000 01110101 01101110 01110011 01101001 01100111  (unsig
00000408: 01101110 01100101 01100100 00100000 01101001 01101110  ned in
0000040e: 01110100 00100000 01101001 00100000 00111101 00100000  t i = 
00000414: 00110000 00111011 00100000 01101001 00100000 00111100  0; i <
0000041a: 00100000 01110011 01101001 01111010 01100101 00111011   size;
00000420: 00100000 01101001 00101011 00101011 00101001 00100000   i++) 
00000426: 01111011 00001010 00100000 00100000 00100000 00100000  {.    
0000042c: 01110000 01110010 01101001 01101110 01110100 01100110  printf
00000432: 00101000 00100010 00100101 00110000 00110010 01111000  ("%02x
00000438: 00100010 00101100 00100000 01100100 01100001 01110100  ", dat
0000043e: 01100001 01011011 01101001 01011101 00101001 00111011  a[i]);
00000444: 00001010 00100000 00100000 00100000 00100000 01101001  .    i
0000044a: 01100110 00100000 00101000 01101001 00100000 00100001  f (i !
00000450: 00111101 00100000 01110011 01101001 01111010 01100101  = size
00000456: 00100000 00101101 00100000 00110001 00100000 00100110   - 1 &
0000045c: 00100110 00100000 01101001 00100000 00100101 00100000  & i % 
00000462: 00110010 00100000 00111101 00111101 00100000 00110001  2 == 1
00000468: 00101001 00100000 01111011 00001010 00100000 00100000  ) {.  
0000046e: 00100000 00100000 00100000 00100000 01110000 01110010      pr
00000474: 01101001 01101110 01110100 01100110 00101000 00100010  intf("
0000047a: 00100000 00100010 00101001 00111011 00001010 00100000   ");. 
00000480: 00100000 00100000 00100000 01111101 00001010 00100000     }. 
00000486: 00100000 01111101 00001010 00100000 00100000 01101001   }.  i
0000048c: 01100110 00100000 00101000 01110011 01101001 01111010  f (siz
00000492: 01100101 00100000 00111100 00100000 00110001 00110110  e < 16
00000498: 00101001 00100000 01111011 00001010 00100000 00100000  ) {.  
0000049e: 00100000 00100000 01100110 01101111 01110010 00100000    for 
000004a4: 00101000 01110101 01101110 01110011 01101001 01100111  (unsig
000004aa: 01101110 01100101 01100100 00100000 01101001 01101110  ned in
000004b0: 01110100 00100000 01101001 00100000 00111101 00100000  t i = 
000004b6: 00110000 00111011 00100000 01101001 00100000 00111100  0; i <
000004bc: 00100000 00101000 00110001 00110110 00100000 00101101   (16 -
000004c2: 00100000 01110011 01101001 01111010 01100101 00101001   size)
000004c8: 00111011 00100000 01101001 00101011 00101011 00101001  ; i++)
000004ce: 00100000 01111011 00001010 00100000 00100000 00100000   {.   
000004d4: 00100000 00100000 00100000 01110000 01110010 01101001     pri
000004da: 01101110 01110100 01100110 00101000 00100010 00100000  ntf(" 
000004e0: 00100000 00100010 00101001 00111011 00001010 00100000   ");. 
000004e6: 00100000 00100000 00100000 00100000 00100000 01101001       i
000004ec: 01100110 00100000 00101000 01101001 00100000 00100101  f (i %
000004f2: 00100000 00110010 00100000 00111101 00111101 00100000   2 == 
000004f8: 00110001 00101001 00100000 01111011 00001010 00100000  1) {. 
000004fe: 00100000 00100000 00100000 00100000 00100000 00100000        
00000504: 00100000 01110000 01110010 01101001 01101110 01110100   print
0000050a: 01100110 00101000 00100010 00100000 00100010 00101001  f(" ")
00000510: 00111011 00001010 00100000 00100000 00100000 00100000  ;.    
00000516: 00100000 00100000 01111101 00001010 00100000 00100000    }.  
0000051c: 00100000 00100000 01111101 00001010 00100000 00100000    }.  
00000522: 01111101 00001010 01111101 00001010 00001010 00101111  }.}../
00000528: 00101010 00101010 00001010 00100000 00101010 00100000  **. * 
0000052e: 01010111 01110010 01101001 01110100 01100101 01110011  Writes
00000534: 00100000 01100100 01100001 01110100 01100001 00100000   data 
0000053a: 01110100 01101111 00100000 01110011 01110100 01100100  to std
00000540: 01101111 01110101 01110100 00100000 01100001 01110011  out as
00000546: 00100000 01100011 01101000 01100001 01110010 01100001   chara
0000054c: 01100011 01110100 01100101 01110010 01110011 00101110  cters.
00000552: 00001010 00100000 00101010 00001010 00100000 00101010  . *. *
00000558: 00100000 01010011 01100101 01100101 00100000 01101101   See m
0000055e: 01111001 01111000 01111000 01100100 00101110 01101101  yxxd.m
00000564: 01100100 00100000 01100110 01101111 01110010 00100000  d for 
0000056a: 01100100 01100101 01110100 01100001 01101001 01101100  detail
00000570: 01110011 00101110 00001010 00100000 00101010 00001010  s.. *.
00000576: 00100000 00101010 00100000 01100100 01100001 01110100   * dat
0000057c: 01100001 00111010 00100000 01100001 01101110 00100000  a: an 
00000582: 01100001 01110010 01110010 01100001 01111001 00100000  array 
00000588: 01101111 01100110 00100000 01101110 01101111 00100000  of no 
0000058e: 01101101 01101111 01110010 01100101 00100000 01110100  more t
00000594: 01101000 01100001 01101110 00100000 00110001 00110110  han 16
0000059a: 00100000 01100011 01101000 01100001 01110010 01100001   chara
000005a0: 01100011 01110100 01100101 01110010 01110011 00001010  cters.
000005a6: 00100000 00101010 00100000 01110011 01101001 01111010   * siz
000005ac: 01100101 00111010 00100000 01110100 01101000 01100101  e: the
000005b2: 00100000 01110011 01101001 01111010 01100101 00100000   size 
000005b8: 01101111 01100110 00100000 01110100 01101000 01100101  of the
000005be: 00100000 01100001 01110010 01110010 01100001 01111001   array
000005c4: 00001010 00100000 00101010 00101010 00101111 00001010  . **/.
000005ca: 01110110 01101111 01101001 01100100 00100000 01110000  void p
000005d0: 01110010 01101001 01101110 01110100 01000100 01100001  rintDa
000005d6: 01110100 01100001 01000001 01110011 01000011 01101000  taAsCh
000005dc: 01100001 01110010 01110011 00101000 01110101 01101110  ars(un
000005e2: 01110011 01101001 01100111 01101110 01100101 01100100  signed
000005e8: 00100000 01100011 01101000 01100001 01110010 00100000   char 
000005ee: 00101010 01100100 01100001 01110100 01100001 00101100  *data,
000005f4: 00100000 01110011 01101001 01111010 01100101 01011111   size_
000005fa: 01110100 00100000 01110011 01101001 01111010 01100101  t size
00000600: 00101001 00100000 01111011 00001010 00100000 00100000  ) {.  
00000606: 01100110 01101111 01110010 00100000 00101000 01110101  for (u
0000060c: 01101110 01110011 01101001 01100111 01101110 01100101  nsigne
00000612: 01100100 00100000 01101001 01101110 01110100 00100000  d int 
00000618: 01101001 00100000 00111101 00100000 00110000 00111011  i = 0;
0000061e: 00100000 01101001 00100000 00111100 00100000 01110011   i < s
00000624: 01101001 01111010 01100101 00111011 00100000 01101001  ize; i
0000062a: 00101011 00101011 00101001 00100000 01111011 00001010  ++) {.
00000630: 00100000 00100000 01101001 01100110 00100000 00101000    if (
00000636: 01100100 01100001 01110100 01100001 01011011 01101001  data[i
0000063c: 01011101 00100000 00111100 00100000 00110011 00110010  ] < 32
00000642: 00100000 01111100 01111100 00100000 01100100 01100001   || da
00000648: 01110100 01100001 01011011 01101001 01011101 00100000  ta[i] 
0000064e: 00111110 00100000 00110001 00110010 00110110 00101001  > 126)
00000654: 00100000 01111011 00001010 00100000 00100000 00100000   {.   
0000065a: 00100000 01110000 01110010 01101001 01101110 01110100   print
00000660: 01100110 00101000 00100010 00101110 00100010 00101001  f(".")
00000666: 00111011 00001010 00100000 00100000 01111101 00001010  ;.  }.
0000066c: 00100000 00100000 01100101 01101100 01110011 01100101    else
00000672: 00100000 00100000 01111011 00001010 00100000 00100000    {.  
00000678: 00100000 00100000 00100000 00100000 01110000 01110010      pr
0000067e: 01101001 01101110 01110100 01100110 00101000 00100010  intf("
00000684: 00100101 01100011 00100010 00101100 00100000 01100100  %c", d
0000068a: 01100001 01110100 01100001 01011011 01101001 01011101  ata[i]
00000690: 00101001 00111011 00001010 00100000 00100000 00100000  );.   
00000696: 00100000 01111101 00001010 00100000 00100000 01111101   }.  }
0000069c: 00001010 01111101 00001010 00001010 01110110 01101111  .}..vo
000006a2: 01101001 01100100 00100000 01110010 01100101 01100001  id rea
000006a8: 01100100 01000001 01101110 01100100 01010000 01110010  dAndPr
000006ae: 01101001 01101110 01110100 01001001 01101110 01110000  intInp
000006b4: 01110101 01110100 01000001 01110011 01001000 01100101  utAsHe
000006ba: 01111000 00101000 01000110 01001001 01001100 01000101  x(FILE
000006c0: 00100000 00101010 01101001 01101110 01110000 01110101   *inpu
000006c6: 01110100 00101001 00100000 01111011 00001010 00100000  t) {. 
000006cc: 00100000 01110101 01101110 01110011 01101001 01100111   unsig
000006d2: 01101110 01100101 01100100 00100000 01100011 01101000  ned ch
000006d8: 01100001 01110010 00100000 01100100 01100001 01110100  ar dat
000006de: 01100001 01011011 00110001 00110110 01011101 00111011  a[16];
000006e4: 00001010 00100000 00100000 01101001 01101110 01110100  .  int
000006ea: 00100000 01101110 01110101 01101101 01000010 01111001   numBy
000006f0: 01110100 01100101 01110011 01010010 01100101 01100001  tesRea
000006f6: 01100100 00100000 00111101 00100000 01100110 01110010  d = fr
000006fc: 01100101 01100001 01100100 00101000 01100100 01100001  ead(da
00000702: 01110100 01100001 00101100 00100000 00110001 00101100  ta, 1,
00000708: 00100000 00110001 00110110 00101100 00100000 01101001   16, i
0000070e: 01101110 01110000 01110101 01110100 00101001 00111011  nput);
00000714: 00001010 00100000 00100000 01110101 01101110 01110011  .  uns
0000071a: 01101001 01100111 01101110 01100101 01100100 00100000  igned 
00000720: 01101001 01101110 01110100 00100000 01101111 01100110  int of
00000726: 01100110 01110011 01100101 01110100 00100000 00111101  fset =
0000072c: 00100000 00110000 00111011 00001010 00100000 00100000   0;.  
00000732: 01110111 01101000 01101001 01101100 01100101 00100000  while 
00000738: 00101000 01101110 01110101 01101101 01000010 01111001  (numBy
0000073e: 01110100 01100101 01110011 01010010 01100101 01100001  tesRea
00000744: 01100100 00100000 00100001 00111101 00100000 00110000  d != 0
0000074a: 00101001 00100000 01111011 00001010 00100000 00100000  ) {.  
00000750: 00100000 00100000 01110000 01110010 01101001 01101110    prin
00000756: 01110100 01100110 00101000 00100010 00100101 00110000  tf("%0
0000075c: 00111000 01111000 00111010 00100000 00100010 00101100  8x: ",
00000762: 00100000 01101111 01100110 01100110 01110011 01100101   offse
00000768: 01110100 00101001 00111011 00001010 00100000 00100000  t);.  
0000076e: 00100000 00100000 01101111 01100110 01100110 01110011    offs
00000774: 01100101 01110100 00100000 00101011 00111101 00100000  et += 
0000077a: 01101110 01110101 01101101 01000010 01111001 01110100  numByt
00000780: 01100101 01110011 01010010 01100101 01100001 01100100  esRead
00000786: 00111011 00001010 00100000 00100000 00100000 00100000  ;.    
0000078c: 01110000 01110010 01101001 01101110 01110100 01000100  printD
00000792: 01100001 01110100 01100001 01000001 01110011 01001000  ataAsH
00000798: 01100101 01111000 00101000 01100100 01100001 01110100  ex(dat
0000079e: 01100001 00101100 00100000 01101110 01110101 01101101  a, num
000007a4: 01000010 01111001 01110100 01100101 01110011 01010010  BytesR
000007aa: 01100101 01100001 01100100 00101001 00111011 00001010  ead);.
000007b0: 00100000 00100000 00100000 00100000 01110000 01110010      pr
000007b6: 01101001 01101110 01110100 01100110 00101000 00100010  intf("
000007bc: 00100000 00100000 00100010 00101001 00111011 00001010    ");.
000007c2: 00100000 00100000 00100000 00100000 01110000 01110010      pr
000007c8: 01101001 01101110 01110100 01000100 01100001 01110100  intDat
000007ce: 01100001 01000001 01110011 01000011 01101000 01100001  aAsCha
000007d4: 01110010 01110011 00101000 01100100 01100001 01110100  rs(dat
000007da: 01100001 00101100 00100000 01101110 01110101 01101101  a, num
000007e0: 01000010 01111001 01110100 01100101 01110011 01010010  BytesR
000007e6: 01100101 01100001 01100100 00101001 00111011 00001010  ead);.
000007ec: 00100000 00100000 00100000 00100000 01110000 01110010      pr
000007f2: 01101001 01101110 01110100 01100110 00101000 00100010  intf("
000007f8: 01011100 01101110 00100010 00101001 00111011 00001010  \n");.
000007fe: 00100000 00100000 00100000 00100000 01101110 01110101      nu
00000804: 01101101 01000010 01111001 01110100 01100101 01110011  mBytes
0000080a: 01010010 01100101 01100001 01100100 00100000 00111101  Read =
00000810: 00100000 01100110 01110010 01100101 01100001 01100100   fread
00000816: 00101000 01100100 01100001 01110100 01100001 00101100  (data,
0000081c: 00100000 00110001 00101100 00100000 00110001 00110110   1, 16
00000822: 00101100 00100000 01101001 01101110 01110000 01110101  , inpu
00000828: 01110100 00101001 00111011 00001010 00100000 00100000  t);.  
0000082e: 01111101 00001010 01111101 00001010 00001010 01110110  }.}..v
00000834: 01101111 01101001 01100100 00100000 01110000 01110010  oid pr
0000083a: 01101001 01101110 01110100 01000100 01100001 01110100  intDat
00000840: 01100001 01000001 01110011 01000010 01101001 01101110  aAsBin
00000846: 00101000 01110101 01101110 01110011 01101001 01100111  (unsig
0000084c: 01101110 01100101 01100100 00100000 01100011 01101000  ned ch
00000852: 01100001 01110010 00100000 00101010 01100100 01100001  ar *da
00000858: 01110100 01100001 00101100 00100000 01110011 01101001  ta, si
0000085e: 01111010 01100101 01011111 01110100 00100000 01110011  ze_t s
00000864: 01101001 01111010 01100101 00101001 00100000 01111011  ize) {
0000086a: 00001010 00100000 00100000 01100011 01101000 01100001  .  cha
00000870: 01110010 00100000 01110000 01011011 00111000 01011101  r p[8]
00000876: 00111011 00001010 00100000 00100000 01101001 01101110  ;.  in
0000087c: 01110100 00100000 01101110 00111011 00001010 00001010  t n;..
00000882: 00100000 00100000 01100110 01101111 01110010 00100000    for 
00000888: 00101000 01110101 01101110 01110011 01101001 01100111  (unsig
0000088e: 01101110 01100101 01100100 00100000 01101001 01101110  ned in
00000894: 01110100 00100000 01101001 00100000 00111101 00100000  t i = 
0000089a: 00110000 00111011 00100000 01101001 00100000 00111100  0; i <
000008a0: 00100000 01110011 01101001 01111010 01100101 00111011   size;
000008a6: 00100000 01101001 00101011 00101011 00101001 00100000   i++) 
000008ac: 01111011 00001010 00100000 00100000 00100000 00100000  {.    
000008b2: 01101110 00100000 00111101 00100000 01100100 01100001  n = da
000008b8: 01110100 01100001 01011011 01101001 01011101 00111011  ta[i];
000008be: 00001010 00100000 00100000 00100000 00100000 01100110  .    f
000008c4: 01101111 01110010 00100000 00101000 01110101 01101110  or (un
000008ca: 01110011 01101001 01100111 01101110 01100101 01100100  signed
000008d0: 00100000 01101001 01101110 01110100 00100000 01101010   int j
000008d6: 00100000 00111101 00100000 00110000 00111011 00100000   = 0; 
000008dc: 01101010 00100000 00111100 00100000 00111000 00111011  j < 8;
000008e2: 00100000 01101010 00101011 00101011 00101001 00100000   j++) 
000008e8: 01111011 00001010 00100000 00100000 00100000 00100000  {.    
000008ee: 00100000 00100000 00100000 01110000 01011011 00110111     p[7
000008f4: 00100000 00101101 00100000 01101010 01011101 00100000   - j] 
000008fa: 00111101 00100000 01101110 00100000 00100101 00100000  = n % 
00000900: 00110010 00111011 00001010 00100000 00100000 00100000  2;.   
00000906: 00100000 00100000 00100000 00100000 01101110 00100000      n 
0000090c: 00111101 00100000 01101110 00100000 00101111 00100000  = n / 
00000912: 00110010 00111011 00001010 00100000 00100000 00100000  2;.   
00000918: 00100000 01111101 00001010 00100000 00100000 00100000   }.   
0000091e: 00100000 01100110 01101111 01110010 00100000 00101000   for (
00000924: 01110101 01101110 01110011 01101001 01100111 01101110  unsign
0000092a: 01100101 01100100 00100000 01101001 01101110 01110100  ed int
00000930: 00100000 01101010 00100000 00111101 00100000 00110000   j = 0
00000936: 00111011 00100000 01101010 00100000 00111100 00100000  ; j < 
0000093c: 00111000 00111011 00100000 01101010 00101011 00101011  8; j++
00000942: 00101001 00100000 01111011 00001010 00100000 00100000  ) {.  
00000948: 00100000 00100000 00100000 00100000 01110000 01110010      pr
0000094e: 01101001 01101110 01110100 01100110 00101000 00100010  intf("
00000954: 00100101 01100100 00100010 00101100 00100000 01110000  %d", p
0000095a: 01011011 01101010 01011101 00101001 00111011 00001010  [j]);.
00000960: 00100000 00100000 00100000 00100000 01111101 00001010      }.
00000966: 00100000 00100000 00100000 00100000 01110000 01110010      pr
0000096c: 01101001 01101110 01110100 01100110 00101000 00100010  intf("
00000972: 00100000 00100010 00101001 00111011 00001010 00100000   ");. 
00000978: 00100000 01111101 00001010 00100000 00100000 01101001   }.  i
0000097e: 01100110 00100000 00101000 01110011 01101001 01111010  f (siz
00000984: 01100101 00100000 00111100 00100000 00110110 00101001  e < 6)
0000098a: 00100000 01111011 00001010 00100000 00100000 00100000   {.   
00000990: 00100000 01100110 01101111 01110010 00100000 00101000   for (
00000996: 01110101 01101110 01110011 01101001 01100111 01101110  unsign
0000099c: 01100101 01100100 00100000 01101001 01101110 01110100  ed int
000009a2: 00100000 01101001 00100000 00111101 00100000 00110000   i = 0
000009a8: 00111011 00100000 01101001 00100000 00111100 00100000  ; i < 
000009ae: 00101000 00110110 00100000 00101101 00100000 01110011  (6 - s
000009b4: 01101001 01111010 01100101 00101001 00111011 00100000  ize); 
000009ba: 01101001 00101011 00101011 00101001 00100000 01111011  i++) {
000009c0: 00001010 00100000 00100000 00100000 00100000 00100000  .     
000009c6: 00100000 01110000 01110010 01101001 01101110 01110100   print
000009cc: 01100110 00101000 00100010 00100000 00100000 00100000  f("   
000009d2: 00100000 00100000 00100000 00100000 00100000 00100000        
000009d8: 00100010 00101001 00111011 00001010 00100000 00100000  ");.  
000009de: 00100000 00100000 01111101 00001010 00100000 00100000    }.  
000009e4: 01111101 00001010 01111101 00001010 00101111 00101010  }.}./*
000009ea: 00101010 00001010 00100000 00101010 00100000 01000010  *. * B
000009f0: 01101001 01110100 01110011 00100000 01101111 01110101  its ou
000009f6: 01110100 01110000 01110101 01110100 00100000 01100110  tput f
000009fc: 01101111 01110010 00100000 01111000 01111000 01100100  or xxd
00000a02: 00101110 00001010 00100000 00101010 00001010 00100000  .. *. 
00000a08: 00101010 00100000 01010011 01100101 01100101 00100000  * See 
00000a0e: 01101101 01111001 01111000 01111000 01100100 00101110  myxxd.
00000a14: 01101101 01100100 00100000 01100110 01101111 01110010  md for
00000a1a: 00100000 01100100 01100101 01110100 01100001 01101001   detai
00000a20: 01101100 01110011 00101110 00001010 00100000 00101010  ls.. *
00000a26: 00001010 00100000 00101010 00100000 01101001 01101110  . * in
00000a2c: 01110000 01110101 01110100 00111010 00100000 01101001  put: i
00000a32: 01101110 01110000 01110101 01110100 00100000 01110011  nput s
00000a38: 01110100 01110010 01100101 01100001 01101101 00001010  tream.
00000a3e: 00100000 00101010 00101010 00101111 00001010 01110110   **/.v
00000a44: 01101111 01101001 01100100 00100000 01110010 01100101  oid re
00000a4a: 01100001 01100100 01000001 01101110 01100100 01010000  adAndP
00000a50: 01110010 01101001 01101110 01110100 01001001 01101110  rintIn
00000a56: 01110000 01110101 01110100 01000001 01110011 01000010  putAsB
00000a5c: 01101001 01110100 01110011 00101000 01000110 01001001  its(FI
00000a62: 01001100 01000101 00100000 00101010 01101001 01101110  LE *in
00000a68: 01110000 01110101 01110100 00101001 00100000 01111011  put) {
00000a6e: 00001010 00100000 00100000 01110101 01101110 01110011  .  uns
00000a74: 01101001 01100111 01101110 01100101 01100100 00100000  igned 
00000a7a: 01100011 01101000 01100001 01110010 00100000 01100100  char d
00000a80: 01100001 01110100 01100001 01011011 00110110 01011101  ata[6]
00000a86: 00111011 00001010 00100000 00100000 01101001 01101110  ;.  in
00000a8c: 01110100 00100000 01101110 01110101 01101101 01000010  t numB
00000a92: 01111001 01110100 01100101 01110011 01010010 01100101  ytesRe
00000a98: 01100001 01100100 00100000 00111101 00100000 01100110  ad = f
00000a9e: 01110010 01100101 01100001 01100100 00101000 01100100  read(d
00000aa4: 01100001 01110100 01100001 00101100 00100000 00110001  ata, 1
00000aaa: 00101100 00100000 00110110 00101100 00100000 01101001  , 6, i
00000ab0: 01101110 01110000 01110101 01110100 00101001 00111011  nput);
00000ab6: 00001010 00100000 00100000 01110101 01101110 01110011  .  uns
00000abc: 01101001 01100111 01101110 01100101 01100100 00100000  igned 
00000ac2: 01101001 01101110 01110100 00100000 01101111 01100110  int of
00000ac8: 01100110 01110011 01100101 01110100 00100000 00111101  fset =
00000ace: 00100000 00110000 00111011 00001010 00100000 00100000   0;.  
00000ad4: 01110111 01101000 01101001 01101100 01100101 00100000  while 
00000ada: 00101000 01101110 01110101 01101101 01000010 01111001  (numBy
00000ae0: 01110100 01100101 01110011 01010010 01100101 01100001  tesRea
00000ae6: 01100100 00100000 00100001 00111101 00100000 00110000  d != 0
00000aec: 00101001 00100000 01111011 00001010 00100000 00100000  ) {.  
00000af2: 00100000 00100000 01110000 01110010 01101001 01101110    prin
00000af8: 01110100 01100110 00101000 00100010 00100101 00110000  tf("%0
00000afe: 00111000 01111000 00111010 00100000 00100010 00101100  8x: ",
00000b04: 00100000 01101111 01100110 01100110 01110011 01100101   offse
00000b0a: 01110100 00101001 00111011 00001010 00100000 00100000  t);.  
00000b10: 00100000 00100000 01101111 01100110 01100110 01110011    offs
00000b16: 01100101 01110100 00100000 00101011 00111101 00100000  et += 
00000b1c: 01101110 01110101 01101101 01000010 01111001 01110100  numByt
00000b22: 01100101 01110011 01010010 01100101 01100001 01100100  esRead
00000b28: 00111011 00001010 00100000 00100000 00100000 00100000  ;.    
00000b2e: 01110000 01110010 01101001 01101110 01110100 01000100  printD
00000b34: 01100001 01110100 01100001 01000001 01110011 01000010  ataAsB
00000b3a: 01101001 01101110 00101000 01100100 01100001 01110100  in(dat
00000b40: 01100001 00101100 00100000 01101110 01110101 01101101  a, num
00000b46: 01000010 01111001 01110100 01100101 01110011 01010010  BytesR
00000b4c: 01100101 01100001 01100100 00101001 00111011 00001010  ead);.
00000b52: 00100000 00100000 00100000 00100000 01110000 01110010      pr
00000b58: 01101001 01101110 01110100 01100110 00101000 00100010  intf("
00000b5e: 00100000 00100010 00101001 00111011 00001010 00100000   ");. 
00000b64: 00100000 00100000 00100000 01110000 01110010 01101001     pri
00000b6a: 01101110 01110100 01000100 01100001 01110100 01100001  ntData
00000b70: 01000001 01110011 01000011 01101000 01100001 01110010  AsChar
00000b76: 01110011 00101000 01100100 01100001 01110100 01100001  s(data
00000b7c: 00101100 00100000 01101110 01110101 01101101 01000010  , numB
00000b82: 01111001 01110100 01100101 01110011 01010010 01100101  ytesRe
00000b88: 01100001 01100100 00101001 00111011 00001010 00100000  ad);. 
00000b8e: 00100000 00100000 00100000 01110000 01110010 01101001     pri
00000b94: 01101110 01110100 01100110 00101000 00100010 01011100  ntf("\
00000b9a: 01101110 00100010 00101001 00111011 00001010 00100000  n");. 
00000ba0: 00100000 00100000 00100000 01101110 01110101 01101101     num
00000ba6: 01000010 01111001 01110100 01100101 01110011 01010010  BytesR
00000bac: 01100101 01100001 01100100 00100000 00111101 00100000  ead = 
00000bb2: 01100110 01110010 01100101 01100001 01100100 00101000  fread(
00000bb8: 01100100 01100001 01110100 01100001 00101100 00100000  data, 
00000bbe: 00110001 00101100 00100000 00110110 00101100 00100000  1, 6, 
00000bc4: 01101001 01101110 01110000 01110101 01110100 00101001  input)
00000bca: 00111011 00001010 00100000 00100000 01111101 00001010  ;.  }.
00000bd0: 00001010 01111101 00001010 00001010 01101001 01101110  .}..in
00000bd6: 01110100 00100000 01101101 01100001 01101001 01101110  t main
00000bdc: 00101000 01101001 01101110 01110100 00100000 01100001  (int a
00000be2: 01110010 01100111 01100011 00101100 00100000 01100011  rgc, c
00000be8: 01101000 01100001 01110010 00100000 00101010 00101010  har **
00000bee: 01100001 01110010 01100111 01110110 00101001 00100000  argv) 
00000bf4: 01111011 00001010 00100000 00100000 01101001 01101110  {.  in
00000bfa: 01110100 00100000 01100010 01101001 01110100 01110011  t bits
00000c00: 00100000 00111101 00100000 01000110 01000001 01001100   = FAL
00000c06: 01010011 01000101 00111011 00001010 00100000 00100000  SE;.  
00000c0c: 01000110 01001001 01001100 01000101 00100000 00101010  FILE *
00000c12: 01101001 01101110 01110000 01110101 01110100 00100000  input 
00000c18: 00111101 00100000 01110000 01100001 01110010 01110011  = pars
00000c1e: 01100101 01000011 01101111 01101101 01101101 01100001  eComma
00000c24: 01101110 01100100 01001100 01101001 01101110 01100101  ndLine
00000c2a: 00101000 01100001 01110010 01100111 01100011 00101100  (argc,
00000c30: 00100000 01100001 01110010 01100111 01110110 00101100   argv,
00000c36: 00100000 00100110 01100010 01101001 01110100 01110011   &bits
00000c3c: 00101001 00111011 00001010 00001010 00100000 00100000  );..  
00000c42: 01101001 01100110 00100000 00101000 01100010 01101001  if (bi
00000c48: 01110100 01110011 00100000 00111101 00111101 00100000  ts == 
00000c4e: 01000110 01000001 01001100 01010011 01000101 00101001  FALSE)
00000c54: 00100000 01111011 00001010 00100000 00100000 00100000   {.   
00000c5a: 00100000 01110010 01100101 01100001 01100100 01000001   readA
00000c60: 01101110 01100100 01010000 01110010 01101001 01101110  ndPrin
00000c66: 01110100 01001001 01101110 01110000 01110101 01110100  tInput
00000c6c: 01000001 01110011 01001000 01100101 01111000 00101000  AsHex(
00000c72: 01101001 01101110 01110000 01110101 01110100 00101001  input)
00000c78: 00111011 00001010 00100000 00100000 01111101 00100000  ;.  } 
00000c7e: 01100101 01101100 01110011 01100101 00100000 01111011  else {
00000c84: 00001010 00100000 00100000 00100000 00100000 01110010  .    r
00000c8a: 01100101 01100001 01100100 01000001 01101110 01100100  eadAnd
00000c90: 01010000 01110010 01101001 01101110 01110100 01001001  PrintI
00000c96: 01101110 01110000 01110101 01110100 01000001 01110011  nputAs
00000c9c: 01000010 01101001 01110100 01110011 00101000 01101001  Bits(i
00000ca2: 01101110 01110000 01110101 01110100 00101001 00111011  nput);
00000ca8: 00001010 00100000 00100000 01111101 00001010 00100000  .  }. 
00000cae: 00100000 01110010 01100101 01110100 01110101 01110010   retur
00000cb4: 01101110 00100000 00110000 00111011 00001010 01111101  n 0;.}
00000cba: 00001010 00001010                                      ..
